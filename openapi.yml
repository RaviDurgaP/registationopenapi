openapi: '3.0.0'
info:
  version: '1.0.0'
  title: Registration Form API
  description: User Registration Form API
servers:
  - url: http://localhost:8080

paths:
  /getuser:
    get:
      summary: Get all users from the registration form
      tags:
        - user
      description: Get all users from the registration form
      responses:
        "200":
          description: Users retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'

    post:
      summary: Add a user to the registration form
      tags:
        - user
      description: Add a user to the registration form
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        "200":
          description: User added successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'

  /getuser/{id}:
    get:
      summary: Get a specific user from the registration form
      tags:
        - user
      description: Get a specific user from the registration form by ID
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the user
          schema:
            type: string
      responses:
        "200":
          description: User retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'

    put:
      summary: Update a user in the registration form
      tags:
        - user
      description: Update a user in the registration form
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the user
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        "200":
          description: User updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'

    delete:
      summary: Delete a user from the registration form
      tags:
        - user
      description: Delete a user from the registration form
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the user
          schema:
            type: string
      responses:
        "200":
          description: User deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'

components:
  schemas:
    Response:
      type: object
      description: Response object for API responses
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
      required:
        - message

    User:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        email:
          type: string
          format: email
        password:
          type: string
        isExist:
          type: boolean
      required:
        - id
        - name
        - email
        - password
    Userdto:
      type: object
      properties:
        name:
          type: string
        email:
          type: string
          format: email
        password:
          type: string
        isExist:
          type: boolean
      
     
    